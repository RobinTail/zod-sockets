// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Action > execute() > should throw acknowledgment related errors 0 1`] = `
InputValidationError({
  "message": "[1]: Expected function, received string",
  "originalError": ZodError({
    "issues": [
      {
        "code": "custom",
        "message": "Expected function, received string",
        "path": [
          1,
        ],
      },
    ],
  }),
})
`;

exports[`Action > execute() > should throw acknowledgment related errors 1 1`] = `
OutputValidationError({
  "message": "[0]: Invalid input: expected number, received string",
  "originalError": ZodError({
    "issues": [
      {
        "code": "invalid_type",
        "expected": "number",
        "message": "Invalid input: expected number, received string",
        "path": [
          0,
        ],
      },
    ],
  }),
})
`;

exports[`Action > execute() > should throw input parsing error 1`] = `
InputValidationError({
  "message": "[0]: Invalid input: expected string, received undefined",
  "originalError": ZodError({
    "issues": [
      {
        "code": "invalid_type",
        "expected": "string",
        "message": "Invalid input: expected string, received undefined",
        "path": [
          0,
        ],
      },
    ],
  }),
})
`;

exports[`Action > getSchema() > should return input schema 1`] = `
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "prefixItems": [
    {
      "type": "string",
    },
  ],
  "type": "array",
}
`;

exports[`Action > getSchema() > should return output schema 1`] = `
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "prefixItems": [
    {
      "type": "number",
    },
  ],
  "type": "array",
}
`;
