// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Documentation helpers > depictBigInt() > should set type:string and format:bigint 1`] = `
{
  "format": "bigint",
  "pattern": "^-?\\d+$",
  "type": "string",
}
`;

exports[`Documentation helpers > depictDate > should set format date 0 1`] = `
{
  "format": "date",
}
`;

exports[`Documentation helpers > depictDate > should set format date 1 1`] = `
{
  "format": "date",
}
`;

exports[`Documentation helpers > depictNullable() > should add null type to the first of anyOf 0 1`] = `
{
  "type": [
    "string",
    "null",
  ],
}
`;

exports[`Documentation helpers > depictNullable() > should add null type to the first of anyOf 1 1`] = `
{
  "type": [
    "string",
    "null",
  ],
}
`;

exports[`Documentation helpers > depictNullable() > should not add null type when it's already there 0 1`] = `
{
  "type": "null",
}
`;

exports[`Documentation helpers > depictNullable() > should not add null type when it's already there 1 1`] = `
{
  "type": "null",
}
`;

exports[`Documentation helpers > depictNullable() > should not add null type when it's already there 2 1`] = `
{
  "type": [
    "string",
    "null",
  ],
}
`;

exports[`Documentation helpers > depictPipeline > should depict as 'number (out)' 1`] = `
{
  "type": "number",
}
`;

exports[`Documentation helpers > depictPipeline > should depict as 'string (preprocess)' 1`] = `
{
  "format": "string (preprocessed)",
}
`;

exports[`Documentation helpers > depictTuple() > should add items:not:{} when no rest 0 1`] = `
{
  "items": {
    "not": {},
  },
}
`;

exports[`Documentation helpers > depictTuple() > should add items:not:{} when no rest 1 1`] = `
{
  "items": {
    "not": {},
  },
}
`;

exports[`Documentation helpers > depictUnion() > should set discriminator prop for such union 1`] = `
{
  "discriminator": {
    "propertyName": "status",
  },
}
`;

exports[`Documentation helpers > getExamples() > should handle { examples: [ 1, 2, 3 ] } 1`] = `
[
  1,
  2,
  3,
]
`;

exports[`Documentation helpers > getExamples() > should handle { examples: [] } 1`] = `[]`;

exports[`Documentation helpers > getExamples() > should handle { examples: undefined } 1`] = `[]`;

exports[`Documentation helpers > getExamples() > should handle {} 1`] = `[]`;

exports[`Documentation helpers > should pull for tuples 1`] = `
[
  [
    "123",
    123,
  ],
]
`;
