// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Documentation > Basic cases > should generate the correct schema for complex types 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing Complex Types
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              type: string
              const: "4"
              description: The version of the protocol
            transport:
              type: string
              enum:
                - polling
                - websocket
              description: The name of the transport
            sid:
              type: string
              description: The session identifier
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          items:
            - type: array
              items:
                type: integer
                format: int64
                exclusiveMinimum: 0
                maximum: 9007199254740991
              minItems: 1
              maxItems: 3
            - type: array
              items:
                type: boolean
            - type: string
          additionalItems: false
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          items:
            - type: string
              const: something
            - type: number
              format: double
              minimum: -1.7976931348623157e+308
              maximum: 1.7976931348623157e+308
          additionalItems: false
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for discriminated union type 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing Discriminated Union Type
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              type: string
              const: "4"
              description: The version of the protocol
            transport:
              type: string
              enum:
                - polling
                - websocket
              description: The name of the transport
            sid:
              type: string
              description: The session identifier
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          items:
            - discriminator: type
              oneOf:
                - type: object
                  properties:
                    type:
                      type: string
                      const: a
                    a:
                      type: string
                  required:
                    - type
                    - a
                - type: object
                  properties:
                    type:
                      type: string
                      const: b
                    b:
                      type: string
                  required:
                    - type
                    - b
          additionalItems: false
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          items:
            - discriminator: status
              oneOf:
                - type: object
                  properties:
                    status:
                      type: string
                      const: success
                    data:
                      format: any
                  required:
                    - status
                - type: object
                  properties:
                    status:
                      type: string
                      const: error
                    error:
                      type: object
                      properties:
                        message:
                          type: string
                      required:
                        - message
                  required:
                    - status
                    - error
          additionalItems: false
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for intersection type 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing Intersection and And types
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              type: string
              const: "4"
              description: The version of the protocol
            transport:
              type: string
              enum:
                - polling
                - websocket
              description: The name of the transport
            sid:
              type: string
              description: The session identifier
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          items:
            - type: object
              properties:
                one:
                  type: string
                two:
                  type: string
              required:
                - one
                - two
          additionalItems: false
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          items:
            - type: object
              properties:
                five:
                  type: integer
                  format: int64
                  minimum: 0
                  maximum: 9007199254740991
                six:
                  type: string
              required:
                - five
                - six
          additionalItems: false
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for nullable and optional types 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing Nullable and Optional Types
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              type: string
              const: "4"
              description: The version of the protocol
            transport:
              type: string
              enum:
                - polling
                - websocket
              description: The name of the transport
            sid:
              type: string
              description: The session identifier
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          items:
            - type: string
            - type: string
              default: test
            - type:
                - boolean
                - "null"
            - type:
                - integer
                - "null"
              format: int64
              exclusiveMinimum: 0
              maximum: 9007199254740991
              default: 123
          additionalItems: false
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          items:
            - type:
                - string
                - "null"
          additionalItems: false
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for union type 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing Union and Or Types
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              type: string
              const: "4"
              description: The version of the protocol
            transport:
              type: string
              enum:
                - polling
                - websocket
              description: The name of the transport
            sid:
              type: string
              description: The session identifier
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingName:
        name: name
        title: name
        payload:
          type: array
          items:
            - oneOf:
                - type: object
                  properties:
                    one:
                      type: string
                    two:
                      type: integer
                      format: int64
                      exclusiveMinimum: 0
                      maximum: 9007199254740991
                  required:
                    - one
                    - two
                - type: object
                  properties:
                    two:
                      type: integer
                      format: int64
                      minimum: -9007199254740991
                      exclusiveMaximum: 0
                    three:
                      type: string
                  required:
                    - two
                    - three
          additionalItems: false
      rootAckForIncomingName:
        title: Acknowledgement for name
        payload:
          type: array
          items:
            - oneOf:
                - type: string
                - type: integer
                  format: int64
                  exclusiveMinimum: 0
                  maximum: 9007199254740991
          additionalItems: false
components: {}
operations:
  RootRecvOperationName:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingName"
    title: name
    summary: Incoming event name
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingName"
"
`;

exports[`Documentation > Basic cases > should generate the correct schema of the example 1`] = `
"asyncapi: 3.0.0
info:
  title: Example API
  version: 1.2.3
id: urn:example:com:socket.io
defaultContentType: text/plain
servers:
  example:
    host: example.com
    pathname: /socket.io
    protocol: https
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              type: string
              const: "4"
              description: The version of the protocol
            transport:
              type: string
              enum:
                - polling
                - websocket
              description: The name of the transport
            sid:
              type: string
              description: The session identifier
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootOutgoingTime:
        name: time
        title: time
        payload:
          type: array
          items:
            - type: string
              description: current ISO time
              examples:
                - 2024-03-28T21:13:15.084Z
          additionalItems: false
        examples:
          - payload:
              - 2024-03-28T21:13:15.084Z
      rootOutgoingChat:
        name: chat
        title: chat
        payload:
          type: array
          items:
            - type: string
              description: message
              examples:
                - Hello there!
            - type: object
              properties:
                from:
                  type: string
                  description: the ID of author
              required:
                - from
              description: extra info
              examples:
                - &a1
                  from: 123abc
          additionalItems: false
        examples:
          - payload:
              - Hello there!
              - *a1
      rootOutgoingRooms:
        name: rooms
        title: rooms
        payload:
          type: array
          items:
            - type: array
              items:
                type: string
              description: room IDs
              examples:
                - &a2
                  - room1
                  - room2
                - &a3
                  - room3
                  - room4
                  - room5
          additionalItems: false
        examples:
          - payload:
              - *a2
          - payload:
              - *a3
      rootOutgoingError:
        name: error
        title: error
        payload:
          type: array
          items:
            - type: string
              description: name
              examples:
                - InputValidationError
            - type: string
              description: message
              examples:
                - "1: Required"
          additionalItems: false
        examples:
          - payload:
              - InputValidationError
              - "1: Required"
      rootIncomingChat:
        name: chat
        title: chat
        payload:
          type: array
          items:
            - type: string
              description: message
              examples:
                - Hello there
          additionalItems: false
        examples:
          - payload:
              - Hello there
      rootIncomingPing:
        name: ping
        title: ping
        payload:
          type: array
          additionalItems:
            format: any
            description: Anything
        examples:
          - payload:
              - something
      rootAckForIncomingPing:
        title: Acknowledgement for ping
        payload:
          type: array
          items:
            - type: string
              const: pong
              description: literally
              examples:
                - pong
          additionalItems:
            format: any
            description: echo
        examples:
          - payload:
              - pong
              - something
      rootIncomingSubscribe:
        name: subscribe
        title: subscribe
        payload:
          type: array
          additionalItems:
            format: any
            description: Does not matter
      rootIncomingUnsubscribe:
        name: unsubscribe
        title: unsubscribe
        payload:
          type: array
          additionalItems:
            format: any
            description: Does not matter
components: {}
operations:
  RootSendOperationTime:
    action: send
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootOutgoingTime"
    title: time
    summary: Outgoing event time
    description: The message produced by the application within the / namespace
  RootSendOperationChat:
    action: send
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootOutgoingChat"
    title: chat
    summary: Outgoing event chat
    description: The message produced by the application within the / namespace
  RootSendOperationRooms:
    action: send
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootOutgoingRooms"
    title: rooms
    summary: Outgoing event rooms
    description: The message produced by the application within the / namespace
  RootSendOperationError:
    action: send
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootOutgoingError"
    title: error
    summary: Outgoing event error
    description: The message produced by the application within the / namespace
  RootRecvOperationChat:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingChat"
    title: chat
    summary: Incoming event chat
    description: The message consumed by the application within the / namespace
  RootRecvOperationPing:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingPing"
    title: ping
    summary: Incoming event ping
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingPing"
  RootRecvOperationSubscribe:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingSubscribe"
    title: subscribe
    summary: Incoming event subscribe
    description: The message consumed by the application within the / namespace
  RootRecvOperationUnsubscribe:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingUnsubscribe"
    title: unsubscribe
    summary: Incoming event unsubscribe
    description: The message consumed by the application within the / namespace
"
`;

exports[`Documentation > Basic cases > should handle bigint, boolean, date, null and readonly 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing additional types
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems:
            - type: object
              properties:
                bigint:
                  type: string
                  format: bigint
                  pattern: ^-?\\d+$
                boolean:
                  readOnly: true
                  type: boolean
                date:
                  format: date
              required:
                - bigint
                - boolean
                - date
          items:
            not: {}
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          prefixItems:
            - type: "null"
            - format: date
          items:
            not: {}
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should handle different number types 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing numbers
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems:
            - type: number
            - type: number
              exclusiveMinimum: 0
            - type: number
              exclusiveMaximum: 0
            - type: number
              minimum: -0.5
              maximum: 0.5
            - type: integer
              minimum: -9007199254740991
              maximum: 9007199254740991
            - type: integer
              exclusiveMinimum: 0
              maximum: 9007199254740991
            - type: integer
              minimum: -9007199254740991
              exclusiveMaximum: 0
            - type: integer
              minimum: -100
              maximum: 100
            - type: integer
              minimum: 0
              maximum: 0
          items:
            not: {}
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          prefixItems:
            - type: string
              format: bigint
              pattern: ^-?\\d+$
          items:
            not: {}
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should handle different string types 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing strings
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems:
            - type: string
            - type: string
              minLength: 1
            - type: string
              maxLength: 15
            - type: string
              minLength: 2
              maxLength: 3
            - type: string
              format: email
              pattern: ^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$
            - type: string
              format: uuid
              pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
            - type: string
              format: cuid
              pattern: ^[cC][^\\s-]{8,}$
            - type: string
              format: cuid2
              pattern: ^[0-9a-z]+$
            - type: string
              format: ulid
              pattern: ^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$
            - type: string
              format: ipv4
              pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$
            - type: string
              format: emoji
              pattern: ^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$
            - type: string
              format: uri
            - type: string
              pattern: \\d+
            - type: string
              minLength: 1
              maxLength: 90
              allOf:
                - pattern: ^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$
                - pattern: .*@example\\.com
          items:
            not: {}
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          prefixItems:
            - type: string
              minLength: 1
          items:
            not: {}
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should handle enum types 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing enums
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems:
            - type: string
              enum:
                - ABC
                - DEF
          items:
            not: {}
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          prefixItems:
            - type: number
              enum:
                - 1
                - 2
          items:
            not: {}
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should handle record 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing record
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems: []
          items:
            not: {}
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          prefixItems:
            - type: object
              propertyNames:
                type: string
              additionalProperties:
                type: integer
                minimum: -9007199254740991
                maximum: 9007199254740991
            - type: object
              propertyNames:
                type: string
                pattern: "[A-Z]+"
              additionalProperties:
                type: boolean
            - type: object
              propertyNames:
                type: integer
                minimum: -9007199254740991
                maximum: 9007199254740991
              additionalProperties:
                type: boolean
            - type: object
              propertyNames:
                type: string
                const: only
              additionalProperties:
                type: boolean
            - type: object
              propertyNames:
                anyOf:
                  - type: string
                    const: option1
                  - type: string
                    const: option2
              additionalProperties:
                type: boolean
            - type: object
              propertyNames:
                type: string
                enum:
                  - option1
                  - option2
              additionalProperties:
                type: boolean
          items:
            not: {}
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should handle transformation schema in output 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing Transformation in response schema
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              type: string
              const: "4"
              description: The version of the protocol
            transport:
              type: string
              enum:
                - polling
                - websocket
              description: The name of the transport
            sid:
              type: string
              description: The session identifier
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          items:
            - type: object
              properties:
                one:
                  type: string
                two:
                  type: integer
                  format: int64
                  exclusiveMinimum: 0
                  maximum: 9007199254740991
              required:
                - one
                - two
          additionalItems: false
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          items:
            - type: number
          additionalItems: false
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should handle tuples 0 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing tuples
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems:
            - type: boolean
          items:
            not: {}
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          prefixItems: []
          items:
            not: {}
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should handle tuples 1 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing tuples
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems:
            - type: string
            - type:
                - string
                - "null"
          items:
            not: {}
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          prefixItems: []
          items:
            not: {}
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should handle tuples 2 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing tuples
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems:
            - type: boolean
            - type: string
            - type: integer
              exclusiveMinimum: 0
              maximum: 9007199254740991
          items:
            not: {}
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          prefixItems: []
          items:
            not: {}
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should handle tuples 3 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing tuples
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems: []
          items:
            not: {}
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          prefixItems: []
          items:
            not: {}
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Basic cases > should handle type any 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing type any
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws: &a1
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems:
            - {}
          items:
            not: {}
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          prefixItems:
            - {}
          items:
            not: {}
  Test:
    address: /test
    title: Namespace /test
    bindings:
      ws: *a1
    messages:
      testOutgoingWithAck:
        name: withAck
        title: withAck
        payload:
          type: array
          prefixItems: []
          items:
            not: {}
      testAckForOutgoingWithAck:
        title: Acknowledgement for withAck
        payload:
          type: array
          examples:
            - - something
          prefixItems:
            - {}
          items: {}
        examples:
          - payload:
              - something
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
  TestSendOperationWithAck:
    action: send
    channel:
      $ref: "#/channels/Test"
    messages:
      - $ref: "#/channels/Test/messages/testOutgoingWithAck"
    title: withAck
    summary: Outgoing event withAck
    description: The message produced by the application within the /test namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Test"
      messages:
        - $ref: "#/channels/Test/messages/testAckForOutgoingWithAck"
"
`;

exports[`Documentation > Basic cases > should handle z.preprocess() 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing z.preprocess()
  version: 3.4.5
defaultContentType: text/plain
servers: {}
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems:
            - format: string (preprocessed)
            - minimum: 0
              maximum: 9007199254740991
              format: integer (preprocessed)
          items:
            not: {}
      rootAckForIncomingTest:
        title: Acknowledgement for test
        payload:
          type: array
          prefixItems:
            - type: boolean
          items:
            not: {}
components: {}
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    reply:
      address:
        location: $message.payload#
        description: "Last argument: acknowledgement handler"
      channel:
        $ref: "#/channels/Root"
      messages:
        - $ref: "#/channels/Root/messages/rootAckForIncomingTest"
"
`;

exports[`Documentation > Security > should depict server and channel security 1`] = `
"asyncapi: 3.0.0
info:
  title: Testing security
  version: 3.4.5
id: "urn:example:com:"
defaultContentType: text/plain
servers:
  test:
    host: example.com
    pathname: /
    protocol: https
    security:
      - $ref: "#/components/securitySchemes/serverSecurity0"
channels:
  Root:
    address: /
    title: Namespace /
    bindings:
      ws:
        bindingVersion: 0.1.0
        method: GET
        headers:
          type: object
          properties:
            connection:
              type: string
              const: Upgrade
            upgrade:
              type: string
              const: websocket
        query:
          type: object
          properties:
            EIO:
              description: The version of the protocol
              type: string
              const: "4"
            transport:
              description: The name of the transport
              type: string
              enum:
                - polling
                - websocket
            sid:
              description: The session identifier
              type: string
          required:
            - EIO
            - transport
          externalDocs:
            description: Engine.IO Protocol
            url: https://socket.io/docs/v4/engine-io-protocol/
    messages:
      rootIncomingTest:
        name: test
        title: test
        payload:
          type: array
          prefixItems: []
          items:
            not: {}
components:
  securitySchemes:
    serverSecurity0:
      type: httpApiKey
      description: Sample security schema
      in: header
      name: X-Api-Key
    rootSecurity0:
      type: userPassword
      description: Namespace level security sample
operations:
  RootRecvOperationTest:
    action: receive
    channel:
      $ref: "#/channels/Root"
    messages:
      - $ref: "#/channels/Root/messages/rootIncomingTest"
    title: test
    summary: Incoming event test
    description: The message consumed by the application within the / namespace
    security:
      - $ref: "#/components/securitySchemes/rootSecurity0"
"
`;
